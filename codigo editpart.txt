protected void handleNotificationEvent(Notification arg0) {
		// SET was the type i need
		if (arg0.getEventType() == Notification.SET) {
			// the notifier sends his new Bounds ...
			if (arg0.getNotifier() instanceof BoundsImpl) {
				BoundsImpl notifier = (BoundsImpl) arg0.getNotifier();
				// for my special coordinate mapping i also need the node,
				// so i save it in this variable ...
				NodeImpl node = (NodeImpl) this.getModel();
				// get the corresponding FieldLabel Object from the model
				ModelElement model = (ModelElement) node.getElement();

				if (arg0.getFeature() instanceof EAttributeImpl) {
					// Get the attribute that has changed
					EAttributeImpl attribute = (EAttributeImpl) arg0.getFeature();
					// set the values for x and y in the model

					if (notifier.getWidth() == -1) {
						model.setWidth(120);
					} else {
						model.setWidth(notifier.getWidth());
					}
					if (notifier.getHeight() == -1) {
						model.setHeigth(20);
					} else {
						model.setHeigth(notifier.getHeight());
					}
					model.setPositionX(notifier.getX());
					model.setPositionY(notifier.getY());

				}
			}

			if (arg0.getNotifier() instanceof FontStyleImpl) {
				FontStyleImpl fontStyleImpl = (FontStyleImpl) arg0.getNotifier();
				int fontColor = fontStyleImpl.getFontColor();
				int fontHeight = fontStyleImpl.getFontHeight();
				String fontName = fontStyleImpl.getFontName();
				boolean bold = fontStyleImpl.isBold();
				NodeImpl node = (NodeImpl) this.getModel();
				ModelElement model = (ModelElement) node.getElement();

				model.setFont("" + fontName);
				model.setTextStyle("" + bold);
				model.setTextColor("" + fontColor);
				model.setTextSize(fontHeight);

				System.out.println();
			}

		}

		super.handleNotificationEvent(arg0);
	}